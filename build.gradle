apply plugin: "java"
apply plugin: "application"
apply plugin: "maven"
apply plugin: "signing"

group = "net.isucon.bench"
archivesBaseName = "isucon-bench"
version = "0.1.1"
description = "Benchmark framework for Web applications, especially for ISUCON"

//set build variables based on build type (release, continuous integration, development)
def isDevBuild
def isCiBuild
def isReleaseBuild
def sonatypeRepositoryUrl
if (hasProperty("release")) {
    isReleaseBuild = true
    sonatypeRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
} else if (hasProperty("ci")) {
    isCiBuild = true
    version += "-SNAPSHOT"
    sonatypeRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
} else {
    isDevBuild = true
    version += "-SNAPSHOT"
}

repositories {
    mavenCentral()
}

dependencies {
    compile "commons-cli:commons-cli:1.3.1"
    compile "org.eclipse.jetty:jetty-client:9.3.3.v20150827"
    compile "org.apache.httpcomponents:httpclient:4.5.1"
    compile "org.jsoup:jsoup:1.8.3"
    compile "com.fasterxml.jackson.core:jackson-databind:2.6.3"
    compile "com.jayway.jsonpath:json-path:2.0.0"
    compile "org.slf4j:slf4j-nop:1.7.12"
}

compileJava {
    gradle.projectsEvaluated {
        if (project.hasProperty('warn')) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
    options.encoding = 'UTF-8'
}

mainClassName = 'net.isucon.bench.Runner'

run {
    // pass stdin to application
    standardInput = System.in
    if (project.hasProperty('args')) {
        // set splitted "args" property values into 'args' option of run task
        // gradle run -Pargs="net.isucon.your.isucon.RootScenario 127.0.0.1"
        args project.args.split('\\s+')
    } else {
        // echo '{}' | gradle run
        args "net.isucon.bench.example.ExampleScenario 127.0.0.1".split('\\s+')
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from "${buildDir}/javadoc"
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    required { isReleaseBuild }
    sign configurations.archives
}

uploadArchives {
    repositories {
        if (isDevBuild) {
            mavenLocal()
        }
        else {
            mavenDeployer {
                if(isReleaseBuild) {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                }

                repository(url: sonatypeRepositoryUrl) {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                pom.project {
                    name 'isucon-bench'
                    packaging 'jar'
                    description 'Benchmark framework for Web applications, especially for ISUCON'
                    url 'http://www.example.com/example-application'

                    scm {
                        url "scm:git@github.com:isucon/isucon-bench-java.git"
                        connection "scm:git@github.com:isucon/isucon-bench-java.git"
                        developerConnection "scm:git@github.com:isucon/isucon-bench-java.git"
                    }
                    licenses {
                        license {
                            name 'MIT'
                            url 'https://opensource.org/licenses/MIT'
                        }
                    }
                    developers {
                        developer {
                            id 'tagomoris'
                            name 'Satoshi Tagomori'
                            email 'tagomoris@gmail.com'
                        }
                    }
                }
            }
        }
    }
}
